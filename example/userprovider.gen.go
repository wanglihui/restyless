// Code generated by file example.go and line 25 DO NOT EDIT.
// For more detail see https://github.com/wanglihui/restyless
package example

import (
	"context"

	"github.com/go-resty/resty/v2"
	"github.com/wanglihui/httperror"
	"github.com/wanglihui/restyless/types"
)

func NewUserProviderImpl(r *resty.Client) UserProvider {
	return &UserProviderImpl{
		r: r,
	}
}

type UserProviderImpl struct {
	r *resty.Client
}

func (it *UserProviderImpl) GetUser(ctx context.Context, userID types.QueryParam) (User, error) {
	var e httperror.HTTPError
	r := it.r.R().SetError(e)

	r = r.SetQueryParam("userID", string(userID))

	var ret User

	r = r.SetResult(&ret)

	resp, err := r.Get("http://www.baidu.com/id")
	if err == nil && resp.IsError() {
		if v, ok := resp.Error().(*httperror.HTTPError); ok && v.Message != "" && v.StatusCode > 0 {
			err = v
		} else {
			err = httperror.New(resp.StatusCode(), string(resp.Body()), int64(resp.StatusCode()))
		}
	}

	return ret, err

}

func (it *UserProviderImpl) PostUser(ctx context.Context, user User) (User, error) {
	var e httperror.HTTPError
	r := it.r.R().SetError(e)

	r = r.SetBody(user)

	var ret User

	r = r.SetResult(&ret)

	resp, err := r.Post("http://www.dixincaigang.cn/user/")
	if err == nil && resp.IsError() {
		if v, ok := resp.Error().(*httperror.HTTPError); ok && v.Message != "" && v.StatusCode > 0 {
			err = v
		} else {
			err = httperror.New(resp.StatusCode(), string(resp.Body()), int64(resp.StatusCode()))
		}
	}

	return ret, err

}

func (it *UserProviderImpl) DeleteUser(ctx context.Context, userID types.PathParam) error {
	var e httperror.HTTPError
	r := it.r.R().SetError(e)

	r = r.SetPathParam("userID", string(userID))

	resp, err := r.Delete("http://www.baidu.com/user/{userID}")
	if err == nil && resp.IsError() {
		if v, ok := resp.Error().(*httperror.HTTPError); ok && v.Message != "" && v.StatusCode > 0 {
			err = v
		} else {
			err = httperror.New(resp.StatusCode(), string(resp.Body()), int64(resp.StatusCode()))
		}
	}

	return err

}

func (it *UserProviderImpl) PutUser(ctx context.Context, userID types.PathParam, user User) (User, error) {
	var e httperror.HTTPError
	r := it.r.R().SetError(e)

	r = r.SetPathParam("userID", string(userID))

	r = r.SetBody(user)

	var ret User

	r = r.SetResult(&ret)

	resp, err := r.Put("http://www.baidu.com/user/{userID}")
	if err == nil && resp.IsError() {
		if v, ok := resp.Error().(*httperror.HTTPError); ok && v.Message != "" && v.StatusCode > 0 {
			err = v
		} else {
			err = httperror.New(resp.StatusCode(), string(resp.Body()), int64(resp.StatusCode()))
		}
	}

	return ret, err

}

func (it *UserProviderImpl) PostUser2(ctx context.Context, uid types.HeaderParam, token types.HeaderParam, user User) (User, error) {
	var e httperror.HTTPError
	r := it.r.R().SetError(e)

	r = r.SetHeader("uid", string(uid))

	r = r.SetHeader("token", string(token))

	r = r.SetBody(user)

	var ret User

	r = r.SetResult(&ret)

	resp, err := r.Post("http://www.baidu.com/user2")
	if err == nil && resp.IsError() {
		if v, ok := resp.Error().(*httperror.HTTPError); ok && v.Message != "" && v.StatusCode > 0 {
			err = v
		} else {
			err = httperror.New(resp.StatusCode(), string(resp.Body()), int64(resp.StatusCode()))
		}
	}

	return ret, err

}

func (it *UserProviderImpl) GetUsers(ctx context.Context) ([]User, error) {
	var e httperror.HTTPError
	r := it.r.R().SetError(e)

	var ret []User

	r = r.SetResult(&ret)

	resp, err := r.Get("http://www.baidu.com/users")
	if err == nil && resp.IsError() {
		if v, ok := resp.Error().(*httperror.HTTPError); ok && v.Message != "" && v.StatusCode > 0 {
			err = v
		} else {
			err = httperror.New(resp.StatusCode(), string(resp.Body()), int64(resp.StatusCode()))
		}
	}

	return ret, err

}

func (it *UserProviderImpl) GetUserPoint(ctx context.Context) (*User, error) {
	var e httperror.HTTPError
	r := it.r.R().SetError(e)

	var ret = new(User)

	r = r.SetResult(&ret)

	resp, err := r.Get("http://www.baidu.com/user/{userId}/points")
	if err == nil && resp.IsError() {
		if v, ok := resp.Error().(*httperror.HTTPError); ok && v.Message != "" && v.StatusCode > 0 {
			err = v
		} else {
			err = httperror.New(resp.StatusCode(), string(resp.Body()), int64(resp.StatusCode()))
		}
	}

	return ret, err

}

func (it *UserProviderImpl) GetUserAge(ctx context.Context, userId types.PathParam) (int, error) {
	var e httperror.HTTPError
	r := it.r.R().SetError(e)

	r = r.SetPathParam("userId", string(userId))

	var ret int

	r = r.SetResult(&ret)

	resp, err := r.Get("http://www.baidu.com/user/{userId}/age")
	if err == nil && resp.IsError() {
		if v, ok := resp.Error().(*httperror.HTTPError); ok && v.Message != "" && v.StatusCode > 0 {
			err = v
		} else {
			err = httperror.New(resp.StatusCode(), string(resp.Body()), int64(resp.StatusCode()))
		}
	}

	return ret, err

}

func (it *UserProviderImpl) PostUserUseMap(ctx context.Context, user map[string]string) (User, error) {
	var e httperror.HTTPError
	r := it.r.R().SetError(e)

	r = r.SetBody(user)

	var ret User

	r = r.SetResult(&ret)

	resp, err := r.Post("http://www.baidu.com/user/map")
	if err == nil && resp.IsError() {
		if v, ok := resp.Error().(*httperror.HTTPError); ok && v.Message != "" && v.StatusCode > 0 {
			err = v
		} else {
			err = httperror.New(resp.StatusCode(), string(resp.Body()), int64(resp.StatusCode()))
		}
	}

	return ret, err

}
